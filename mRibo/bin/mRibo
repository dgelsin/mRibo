#!/bin/bash

VERSION="v0.2"
echo mRibo ${@}

##############################################################################################################################################################
# mRibo: Wrapper for running metagene analysis on microbial (Bacteria and Archaea) ribosome profiling data
# This pipeline aligns microbial ribosome profiling reads to the genome, creates density files of ribosome protected fragements using
# genomic coordinates, These transcripts are further process and curated until the final intergenic and anti-sense small ncRNAs are reported.
#
##############################################################################################################################################################


help_message () {
	echo ""
	echo "Example usage: "
	echo "mRibo -U reads.fastq -R rRNA.fa -g genome.fa -a genome.gff -d genome_dict -C name_of_user -M name_of_microbe"
	echo ""
	echo "mRibo core options:"
	echo "	-U STR		ribosome profiling reads"
	echo "	-R SRT		Ribosomal RNA and tRNA fasta file for filtering out corresponding reads"
	echo "	-g STR		genome fasta file"
	echo "	-a STR		genome annotation gtf/gff file"
	echo "	-D INT		genome annotation dictionary file"
	echo "	-C STR      	user name"
	echo "	-M STR      	name of microbe being analyzed"
	echo "  -o STR          output directory"

	echo ""
	echo "Additional options:"
	echo "	-I INT		min read length size for meta-gene analysis (default=$MIN_LEN)"
	echo "	-X INT		max read length size for meta-gene analysis (default=$MAX_LEN)"
	echo "	-p INT		number of threads to use for analysis (default=$THREADS)"
	echo "	-c INT		number of cores to use for analysis (default=$CORES)"
	echo "	-lu INT		number of nucleotides to include upstream of the TSS (default=$LENGTH_UPSTREAM)"
	echo "	-ld INT		number of nucleotides to include downstream of the the TSS within the ORF, genes shorter than this are excluded (default=$LENGTH_DOWNSTREAM)"
	echo "	-m INT		style in which footprints are mapped for meta-gene analysis (5 prime or 3 prime) (default=$ALIGNMENT_STYLE)"
	echo "	-d STR		type of density to use for meta-gene plots (rpm or reads)  (default=$DENSITY_STYLE)"
	echo "	-w STR		style in which to weigh density at positions within ORFs, either equal weight (yes) or not (no) (default=$WEIGHT_STYLE)"
	echo "	-dg INT		distance between genes, genes closer than this are removed from start and stop, or can choose 'no' (default=$DISTANCE_GENES)"
	echo "	-r INT		rpkm threshold to use for meta-gene analysis, genes below will be removed from average (default=$RPKM_THRESHOLD)"
	echo "	-y INT		maximum value for y-axis of avggenes meta-gene plot (default=$YMAX_AVGGENES)"
	echo "	-s INT		A-site shift value for pause score meta-gene analysis (default=$ASITE_SHIFT)"
	echo "	-P STR		Style in which to conduct pause score meta-gene analysis, either amino acids (aa) or codons (codon) (default=$PAUSE_STYLE)"
	echo "	-Y INT		maximum value for y-axis of pause score meta-gene plot (default=$YMAX_PAUSE)"
	echo ""
	echo "	--version | -v	show current mRibo version"
	echo "";}



comm () { mribo_print_comment.py "$1" "-"; }
error () { mribo_print_comment.py "$1" "*"; exit 1; }
warning () { mribo_print_comment.py "$1" "*"; }
announcement () { mribo_print_comment.py "$1" "#"; }

# loading supplementary scripts
MRIBO_PATH=$(which mRibo)
BIN_PATH=${MRIBO_PATH%/*}


########################################################################################################
########################               LOADING IN THE PARAMETERS                ########################
########################################################################################################


# option defaults
MIN_LEN=10
MAX_LEN=40
THREADS=1
CORES=1

LENGTH_UPSTREAM=50 
LENGTH_DOWNSTREAM=200
ALIGNMENT_STYLE=5
DENSITY_STYLE=rpm
WEIGHT_STYLE=yes
DISTANCE_GENES=50
RPKM_THRESHOLD=10
YMAX_AVGGENES=0
ASITE_SHIFT=-11
PAUSE_STYLE=aa
YMAX_PAUSE=0

OUT=none
READS1=none
RRNA=none
GENOME=none
ANNOTATION=none
DICTIONARY=none
ALIGN_DIR=none
CREATOR=none
MICROBE=none

# load in params
OPTS=`getopt -o hvt:U:R:g:a:D:C:M:o:I:X:p:c:lu:ld:m:d:w:dg:r:y:s:P:Y: --long help,version -- "$@"`
# make sure the params are entered correctly
if [ $? -ne 0 ]; then help_message; exit 1; fi

# loop through input params
while true; do
        case "$1" in
		-U) READS1=$2; shift 2;;
		-R) RRNA=$2; shift 2;;
		-g) GENOME=$2; shift 2;;
		-a) ANNOTATION=$2; shift 2;;
		-d) DICTIONARY=$2; shift 2;;
		-S) ALIGN_DIR=$2; shift 2;;
		-C) CREATOR=$2; shift 2;;
		-M) MICROBE=$2; shift 2;;
		-o) OUT=$2; shift 2;;
		-I) MIN_LEN=$2; shift 2;;
		-X) MAX_LEN=$2; shift 2;;
		-p) THREADS=$2; shift 2;;
		-c) CORES=$2; shift 2;;
		-lu) LENGTH_UPSTREAM=$2; shift 2;;
		-ld) LENGTH_DOWNSTREAM=$2; shift 2;;
		-m) ALIGNMENT_STYLE=$2; shift 2;;
		-d) DENSITY_STYLE=$2; shift 2;;
		-w) WEIGHT_STYLE=$2; shift 2;;
		-dg) DISTANCE_GENES=$2; shift 2;;
		-r) RPKM_THRESHOLD=$2; shift 2;;
		-y) YMAX_AVGGENES=$2; shift 2;;
		-s) ASITE_SHIFT=$2; shift 2;;
		-P) PAUSE_STYLE=$2; shift 2;;
		-Y) YMAX_PAUSE=$2; shift 2;;
                -h | --help) help_message; exit 0; shift 1;;
		-v | --version) echo mRibo v=${VERSION}; exit 0; shift 1;;
                --) help_message; exit 1; shift; break ;;
                *) break;;
        esac
done


########################################################################################################
########################           MAKING SURE EVERYTHING IS SET UP             ########################
########################################################################################################
# Check if all parameters are entered
if [[ $READS1 == none ]] || [[ $GENOME == none ]] || [[ $RRNA == none ]] || [[ $ANNOTATION == none ]] || [[ $DICTIONARY == none ]]; then 
	comm "Some non-optional parameters (-U -g -d) were not entered"
	help_message; exit 1
elif [ ! -s $READS1 ]; then
	error "Read file $READS1 does not exist, or is empty. Exiting."
elif [ ! -s $GENOME ]; then
	error "Genome file $GENOME does not exist, or is empty. Exiting."
elif [ ! -s $RRNA ]; then
	error "Genome file $RRNA does not exist, or is empty. Exiting."
elif [ ! -s $ANNOTATION ]; then
	error "Annotation file $ANNOTATION does not exist, or is empty. Exiting."
elif [ ! -s $DICTIONARY ]; then
	error "Dictionary file $DICTIONARY does not exist, or is empty. Exiting."
#elif [ ! -s $OUT ]; then
#	error "Output directory is not specified. Exiting."
#elif [ ! -s $CREATOR ]; then
#	error "User name $CREATOR format is incorrect, or is empty. Exiting."
#elif [ ! -s $MICROBE ]; then
#	error "Microbe name $MICROBE format is incorrect, or is empty. Exiting."
fi

#if [[ $DATABASE == none ]]; then
#	warning "You did not specify the NCBI_nr database location with the --nr option. SnapT will not be able to perform the homology search!"
#fi

#if [[ $RFAM == none ]]; then
#	warning "You did not specify the Rfam database location with the --rfam option. SnapT will not be able to perform the homology search!"
#fi

announcement "BEGIN PIPELINE!"
comm "setting up output folders and copying relevant information..."
mkdir $OUT
mkdir input
#	if [ ! -d $OUT ]; then error "cannot make $OUT"; fi
#else
#        warning "Warning: $OUT already exists. SnapT will attempt to continue the existing progress, but it is still recommended that you clear this directory to prevent any conflicts"
	#rm -r ${OUT}/*
#fi


########################################################################################################
########################         ALIGN RNA READS TO GENOME WITH HISAT2          ########################
########################################################################################################
announcement "ALIGN RNA READS TO rRNA WITH bowtie"

comm "Making sure the Perl environment is linked to the conda Perl libraries..."
bowtie --version
if [[ $? -ne 0 ]]; then
	comm "looks like our default perl libraries are not the conda ones. Manually setting perl5 library directory"
	conda_path=$(which snapt)
	echo "metawrap path: $conda_path"
	conda_path=${conda_path%/*}
	if [ $(echo -n $conda_path | tail -c 1) = "/" ]; then conda_path=${conda_path%/*}; fi
	conda_path=${conda_path%/*}
	if [ ! -d ${conda_path}/lib/perl5/site_perl/5.22.0 ]; then
		error "${conda_path}/lib/perl5/site_perl/5.22.0 does not exixt. This is probably not a conda installation of SnapT. Install the necessary Perl dependancies to run hisat2. Exiting..."
	fi
	perl_libs=${conda_path}/lib/perl5/site_perl/5.22.0
	echo "Will use perl5 libraries located in $perl_libs - hopefully they are there..."
	export PERL5LIB="$perl_libs"
else
	echo "Looks like the perl libraries are set correctly. Continue..."
fi


if [[ -s input/bowtie_rRNA_alignment/bowtie_rRNA_index.1.ebwt ]]; then
	comm "Looks like the bowtie rRNA index already exists in the output directory. Skipping..."
else
	comm "Building bowtie rRNA index"
	mkdir input/bowtie_rRNA_alignment
	cp $RRNA input/bowtie_rRNA_alignment/rRNA.fa
	bowtie-build input/bowtie_rRNA_alignment/rRNA.fa input/bowtie_rRNA_alignment/bowtie_rRNA_index \
	 -p $THREADS --quiet
	if [[ $? -ne 0 ]]; then error "bowtie rRNA index could not be build. Exiting..."; fi
fi

if [[ -s input/bowtie_rRNA_alignment/rRNA_alignment.sam ]]; then
	comm "Looks like the rRNA alignment files aready exist in the output directory. Skipping..."
else
	comm "Aligning $READS1 to $RRNA with bowtie"
	bowtie -v 2 -y -m 1 -a --best --strata -S -p $THREADS --un input/bowtie_rRNA_alignment/rRNA_filtered_reads.fq input/bowtie_rRNA_alignment/bowtie_rRNA_index $READS1 input/bowtie_rRNA_alignment/rRNA_alignment.sam
	fi
	if [[ $? -ne 0 ]]; then error "bowtie rRNA alignment failed. Exiting..."; fi


if [[ -s input/bowtie_genome_alignment/bowtie_genome_index.1.ebwt ]]; then
	comm "Looks like the bowtie genome index already exists in the output directory. Skipping..."
else
	comm "Building bowtie genome index"
	mkdir input/bowtie_genome_alignment
	cp $GENOME input/bowtie_genome_alignment/genome.fa
	bowtie-build input/bowtie_genome_alignment/genome.fa input/bowtie_genome_alignment/bowtie_genome_index \
	 -p $THREADS --quiet
	if [[ $? -ne 0 ]]; then error "bowtie rRNA index could not be build. Exiting..."; fi
fi


if [[ -s input/bowtie_genome_alignment/genome_alignment.sam ]]; then
	comm "Looks like the rRNA alignment files aready exist in the output directory. Skipping..."
else
	comm "Aligning rRNA-filtered $READS1 to $GENOME with bowtie"
	bowtie -v 2 -y -m 1 -a --best --strata -S -p $THREADS input/bowtie_genome_alignment/bowtie_genome_index input/bowtie_rRNA_alignment/rRNA_filtered_reads.fq input/bowtie_genome_alignment/genome_alignment.sam
	fi
	if [[ $? -ne 0 ]]; then error "bowtie genome alignment failed. Exiting..."; fi

mkdir input/alignment
mv input/bowtie_genome_alignment/genome_alignment.sam input/alignment/${CREATOR}1_match.sam
mkdir input/FASTQ
cp input/bowtie_rRNA_alignment/rRNA_filtered_reads.fq input/FASTQ/${CREATOR}1  

if [[ -s output/reads/density/density/DG1/minus ]]; then
	comm "Looks like generating the density dictionary was already done. Skipping..."
else
	comm "Generating density dictionary from ${CREATOR}1_match.sam"

	density_wrapper.py input/FASTQ/ $ANNOTATION $DICTIONARY input/alignment/ $CREATOR $MICROBE $MIN_LEN $MAX_LEN $THREADS $CORES
	fi
	comm "Succesfully generated density from ${CREATOR}1_match.sam."
	if [[ $? -ne 0 ]]; then error "Failed to generate density from ${CREATOR}1_match.sam. Exiting..."; fi

if [[ -s output/reads/analysis/individual/DG1/avggenes/start_all.csv ]]; then
	comm "Looks like meta-gene analysis was already done. Skipping..."
else
	comm "Conducting meta-gene analysis on ribosome profiling density from ${CREATOR}1_match.sam"

	main_wrapper.py $DICTIONARY $CREATOR $MICROBE $MIN_LEN $MAX_LEN $THREADS $CORES $LENGTH_UPSTREAM $LENGTH_DOWNSTREAM $ALIGNMENT_STYLE $DENSITY_STYLE $WEIGHT_STYLE $DISTANCE_GENES $RPKM_THRESHOLD $YMAX_AVGGENES $ASITE_SHIFT $PAUSE_STYLE $YMAX_PAUSE
	fi
	comm "Succesfully carried out meta-gene analysis from ${CREATOR}1_match.sam."
	if [[ $? -ne 0 ]]; then error "Failed to conduct meta-gene analysis on ${CREATOR}1_match.sam. Exiting..."; fi

mv output $OUT
mv input $OUT
########################################################################################################
########################     sRNA DISCOVERY PIPELINE SUCCESSFULLY FINISHED!!!   ########################
########################################################################################################
announcement "mRibo META-GENE ANALYSIS FINISHED SUCCESSFULLY!"